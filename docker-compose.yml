# https://gist.github.com/gitaarik/8735255
# https://github.com/nicholaskajoh/jack
# https://github.com/nicholaskajoh/jack/blob/master/docker-compose.prod.yml
# https://stackoverflow.com/questions/34120504/how-can-i-make-docker-compose-build-an-image-from-a-remote-git-repository
# https://github.com/alexisrolland/docker-postgresql-postgraphile
# https://medium.com/mobileforgood/coding-tips-patterns-for-continuous-integration-with-docker-on-travis-ci-9cedb8348a62
# https://medium.com/coderbunker/a-better-way-to-develop-your-graphql-api-using-docker-postgresql-postgraphile-7a1ae034b826
# https://stackoverflow.com/questions/36781984/load-postgres-dump-after-docker-compose-up
# https://hub.docker.com/_/postgres/
# https://hackernoon.com/dockerizing-an-existing-rails-postgresql-app-with-docker-compose-a30a7e1b3f40
# https://medium.com/@beld_pro/quick-tip-creating-a-postgresql-container-with-default-user-and-password-8bb2adb82342
# https://medium.com/@xiaolishen/develop-in-docker-a-node-backend-and-a-react-front-end-talking-to-each-other-5c522156f634
# https://www.digitalocean.com/community/tutorials/how-to-use-traefik-as-a-reverse-proxy-for-docker-containers-on-ubuntu-18-04
# https://support.microfocus.com/kb/doc.php?id=7013103
# DOCKER_HOST, DOCKER_TLS_VERIFY, and DOCKER_CERT_PATH
# https://stackoverflow.com/questions/991758/how-to-get-pem-file-from-key-and-crt-files
https://stackoverflow.com/questions/34120504/how-can-i-make-docker-compose-build-an-image-from-a-remote-git-repository

version: "3.3"

services:
  traefik:
    container_name: traefik_container
    image: traefik:v2.2
    command: --api.insecure=true --providers.docker --entrypoints.web.address=:80
    ports:
      - "80:80" # The HTTP port
      - "8080:8080" # The Web UI (enabled by --api)
      - "443:443" # Secure port
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # So that Traefik can listen to the Docker events
    labels:
      - "traefik.http.routers.traefik.rule=Host(`traefik.localhost`)"
    networks:
      - web
      
  postgres:
    container_name: postgres
    restart: always
    image: postgres:10.4-alpine
    build:
      context: ./joegatt.net-db
    volumes:
      - ./joegatt.net-db/init:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_USER: ${JOEGATTNET_USER}
      POSTGRES_PASSWORD: ${JOEGATTNET_PASSWORD}
      POSTGRES_DB: ${JOEGATTNET_DB}
    expose:
      - 5432
    ports:
      - 5432
    networks:
      - psql-pgql
      - postgres

  # pgadmin:
  #   container_name: pgadmin
  #   image: dpage/pgadmin4
  #   depends_on:
  #     - postgres
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-pgadmin4@pgadmin.org}
  #     PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
  #   volumes:
  #     - pgadmin:/root/.pgadmin
  #   ports:
  #     - "${PGADMIN_PORT:-5050}:80"
  #   networks:
  #     - postgres
  #   restart: unless-stopped

  graphql:
    container_name: graphql
    restart: always
    image: graphile/postgraphile
    environment:
      DATABASE_URL: postgres://${JOEGATTNET_USER}:${JOEGATTNET_PASSWORD}@postgres:5432/${JOEGATTNET_DB}
      PORT: 5432
    depends_on:
      - postgres
    labels:
      - "traefik.http.routers.graphql.rule=Host(`graphql.localhost`)"
    networks:
    - psql-pgql
    - web
    ports:
      - 5000:5000
    command:
      [
        "-w",
        "--cors",
        "-c",
        "postgres://${JOEGATTNET_USER}:${JOEGATTNET_PASSWORD}@postgres:5432/${JOEGATTNET_DB}",
        "-s",
        "api",
        "--extended-errors",
        "hint,detail,errcode",
        "--jwt-secret",
        $JWT_SECRET,
        "--token",
        "api.jwt_token",
        "--default-role",
        "unregistered"
      ]

  v3joegattnet:
    container_name: v3.joegatt.net
    build: 
      context: ./joegatt.net-v3-html
      dockerfile: Dockerfile
    ports:
      - 3006:3006
    volumes:
      - ./joegatt.net-v3-html:/usr/share/nginx/html
    labels:
      - "traefik.http.routers.v3joegattnet.rule=Host(`v3joegattnet.localhost`)"
    networks:
      - web

  # joegattnetweb:
  #   container_name: joegatt.net-web
  #   build: 
  #     context: ./joegatt.net-web
  #     dockerfile: Dockerfile
  #   ports:
  #     - 3007:3007
  #   stdin_open: true 
  #   environment:
  #     - NODE_ENV=development
  #     - CHOKIDAR_USEPOLLING=true
  #   volumes:
  #     - ./joegatt.net-web:/app/
  #     - /app/node_modules
  #   labels:
  #     - "traefik.http.routers.joegattnetweb.rule=Host(`joegattnetweb.localhost`)"
  #   networks:
  #     - web

  # sandboxcra:
  #   container_name: sandboxcra
  #   build: 
  #     context: ./sandboxcra
  #     dockerfile: Dockerfile
  #   ports:
  #     - 3001:3001
  #   stdin_open: true 
  #   environment:
  #     - NODE_ENV=development
  #     - CHOKIDAR_USEPOLLING=true
  #   volumes:
  #     - ./sandboxcra:/app/
  #     - /app/node_modules
  #   labels:
  #     - "traefik.http.routers.sandboxcra.rule=Host(`sandboxcra.localhost`)"
  #   networks:
  #     - web

  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: prometheus
  #   ports:
  #   - 9090:9090
  #   command:
  #   - --config.file=/etc/prometheus/prometheus.yml
  #   volumes:
  #   - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
  #   depends_on:
  #   - cadvisor

  # cadvisor:
  #   image: google/cadvisor:latest
  #   container_name: cadvisor
  #   ports:
  #   - 9191:9191
  #   volumes:
  #   - /:/rootfs:ro
  #   - /var/run:/var/run:rw
  #   - /sys:/sys:ro
  #   - /var/lib/docker/:/var/lib/docker:ro
  #   depends_on:
  #   - redis

  # redis:
  #   image: redis:latest
  #   container_name: redis
  #   ports:
  #   - 6379:6379

networks:
  psql-pgql:
  postgres:
    driver: bridge
  web:

volumes:
  postgres:
#   pgadmin:
