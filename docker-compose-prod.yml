services:
  traefik:
    image: "traefik:v2.5"
    container_name: "traefik"
    command:
      - "--log.level=WARN"
      - "--api=true"
      - "--api.dashboard=true"
      - "--api.insecure=false"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.dnschallenge=true"
      - "--certificatesresolvers.myresolver.acme.dnschallenge.provider=cloudflare"
      - "--certificatesresolvers.myresolver.acme.email=${ADMIN_EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--pilot.token=${TRAEFIK_PILOT_KEY}"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.joegatt.net`, `traefik.joegatt.org`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=myresolver"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=${ADMINER_USER_PASSWORD}"
      - "traefik.http.routers.redirect-router.entrypoints=websecure"
      - "traefik.http.routers.redirect-router.rule=Host(`newsletter.joegatt.net`)"
      - "traefik.http.routers.redirect-router.middlewares=redirect-regex"
      - "traefik.http.middlewares.redirect-regex.redirectregex.regex=(.)*"
      - "traefik.http.middlewares.redirect-regex.redirectregex.replacement=https://newsletter.joegatt.org"
      - "traefik.http.middlewares.redirect-regex.redirectregex.permanent=false"
    environment:
      - CLOUDFLARE_EMAIL=${CLOUDFLARE_EMAIL}
      - CLOUDFLARE_DNS_API_TOKEN=${CLOUDFLARE_DNS_API_TOKEN}
      - CLOUDFLARE_API_KEY=${CLOUDFLARE_API_KEY}
    networks:
      - frontend
    ports:
      - "443:443"
      - "8080:8080"
    volumes:
      - "./letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  factory:
    container_name: factory.joegatt.net
    build:
      context: ./joegatt.net-factory
    volumes:
      - ./tmp/npm:/root/.npm:z
      - ./joegatt.net-factory/src:/usr/src/app/src:z
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.factory.rule=Host(`factory.joegatt.net`, `factory.joegatt.org`)"
      - "traefik.http.routers.factory.entrypoints=websecure"
      - "traefik.http.routers.factory.tls.certresolver=myresolver"
    networks:
      - backend
      - frontend
    command: node ./dist/index.js
    environment:
      - NODE_ENV=production
      - POSTGRES_DB=${JOEGATTNET_DB}
      - POSTGRES_PASSWORD=${JOEGATTNET_PASSWORD}
      - POSTGRES_USER=${JOEGATTNET_USER}
    restart: always

  web:
    container_name: web.joegatt.net
    build:
      context: ./joegatt.net-web
    volumes:
      - ./tmp/npm:/root/.npm:z
      - ./joegatt.net-web/src:/usr/src/app/src:z
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web.rule=Host(`v4.joegatt.net`)"
      - "traefik.http.routers.web.entrypoints=websecure"
      - "traefik.http.routers.web.tls.certresolver=myresolver"
    networks:
      - frontend
    command: node ./src/index.js
    # command: node ./dist/index.js
    # restart: always

  graphql:
    container_name: graphql
    restart: always
    image: graphile/postgraphile
    environment:
      DATABASE_URL: postgres://${JOEGATTNET_USER}:${JOEGATTNET_PASSWORD}@postgres:5432/${JOEGATTNET_DB}
      PORT: 5432
    depends_on:
      - postgres
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.graphql.rule=Host(`graphql.joegatt.net`, `graphql.joegatt.org`)"
      - "traefik.http.routers.graphql.entrypoints=websecure"
      - "traefik.http.routers.graphql.tls.certresolver=myresolver"
    networks:
      - backend
      - frontend
    command:
      [
        "-w",
        "--cors",
        "-c",
        "postgres://${JOEGATTNET_USER}:${JOEGATTNET_PASSWORD}@postgres:5432/${JOEGATTNET_DB}",
        "-s",
        "api",
        "--extended-errors",
        "hint,detail,errcode",
        "--jwt-secret",
        $JWT_SECRET,
        "--token",
        "api.jwt_token",
        "--default-role",
        "unregistered",
      ]
    ports:
      - 5433:5433

  postgres:
    container_name: postgres
    image: postgres:10
    volumes:
      - ./joegatt.net-db/init:/docker-entrypoint-initdb.d
      - dbdata:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${JOEGATTNET_DB}
      - POSTGRES_PASSWORD=${JOEGATTNET_PASSWORD}
      - POSTGRES_USER=${JOEGATTNET_USER}
    networks:
      - backend
    ports:
      - 5432:5432

  v3joegattnet:
    container_name: v3.joegatt.net
    build:
      context: ./joegatt.net-v3-html
    volumes:
      - ./joegatt.net-v3-html:/usr/share/nginx/html
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.v3joegattnet.rule=Host(`v3.joegatt.net`, `joegatt.net`, `www.joegatt.net`)"
      - "traefik.http.routers.v3joegattnet.entrypoints=websecure"
      - "traefik.http.routers.v3joegattnet.tls.certresolver=myresolver"
    networks:
      - frontend

  dbadmin:
    container_name: dbadmin
    image: adminer
    depends_on:
      - postgres
      - postgreslistmonk
    networks:
      - backend
      - frontend
      - listmonk
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dbadmin.rule=Host(`adminer.joegatt.net`, `adminer.joegatt.org`)"
      - "traefik.http.routers.dbadmin.entrypoints=websecure"
      - "traefik.http.routers.dbadmin.tls.certresolver=myresolver"
      # - "traefik.http.routers.dbadmin.middlewares=dbauth"
      # - "traefik.http.middlewares.dbauth.basicauth.users=${ADMINER_USER_PASSWORD}" # uncomment if you will secure db admin with password # substitute with your htpasswd string and escape dollar signs!

  # APHROCONFUSO ************************************************************
  # *************************************************************************

  v0aphroconfuso:
    container_name: v0.aphroconfuso
    build:
      context: ./aphroconfuso-v0
    volumes:
      - ./aphroconfuso-v0:/usr/share/nginx/html
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.v0aphroconfuso.rule=Host(`aphroconfuso.mt`)"
      - "traefik.http.routers.v0aphroconfuso.entrypoints=websecure"
      - "traefik.http.routers.v0aphroconfuso.tls.certresolver=myresolver"
    networks:
      - frontend

  aphroconfuso:
    container_name: aphroconfuso
    image: ghost:5.8.3
    ports:
      - "2368:2368"
    volumes:
      - .:/var/lib/ghost/content
      - /etc/localtime:/etc/localtime:ro
    environment:
      url: https://v1.aphroconfuso.mt
      mail__transport: "${MAIL_TRANSPORT}"
      mail__options__host: "${MAIL_HOST}"
      mail__options__port: "${MAIL_PORT}"
      mail__options__secureConnection: "${MAIL_SECURE_CONNECTION}"
      mail__options__auth__user: "${MAIL_USER}"
      mail__options__auth__pass: "${MAIL_PASSWORD}"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ghost.rule=Host(`v1.aphroconfuso.mt`)"
      - "traefik.http.routers.ghost.entrypoints=websecure"
      - "traefik.http.routers.ghost.tls.certresolver=myresolver"
    networks:
      - frontend
    restart: unless-stopped

  listmonk:
    container_name: listmonk
    restart: unless-stopped
    image: listmonk/listmonk:latest
    ports:
      - "9000:9000"
    environment:
      - TZ=Etc/GMT+1
    networks:
      - frontend
      - listmonk
    depends_on:
      - postgreslistmonk
    command:
      [
        sh,
        -c,
        "yes | ./listmonk --install --idempotent --config /listmonk/config.toml && ./listmonk --config /listmonk/config.toml --static-dir=/listmonk/static --i18n-dir=/listmonk/i18n",
      ]
    volumes:
      - ./aphroconfuso.mt-v1/listmonk/config.toml:/listmonk/config.toml
      - ./aphroconfuso.mt-v1/listmonk/static:/listmonk/static
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.newsletter.rule=Host(`newsletter.aphroconfuso.mt`)"
      - "traefik.http.routers.newsletter.entrypoints=websecure"
      - "traefik.http.routers.newsletter.tls.certresolver=myresolver"

  postgreslistmonk:
    container_name: postgreslistmonk
    image: postgres:11
    ports:
      - "9433:5432"
    command: -p 9433
    networks:
      - listmonk
    environment:
      - POSTGRES_DB=${LISTMONK_DB}
      - POSTGRES_PASSWORD=${LISTMONK_PASSWORD}
      - POSTGRES_USER=${LISTMONK_USER}
    restart: unless-stopped
    volumes:
      - aphroconfuso.mt-v1-listmonk-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U listmonk"]
      interval: 10s
      timeout: 5s
      retries: 6

  strapi:
    container_name: strapi
    image: naskio/strapi
    environment:
      NODE_ENV: production
      DATABASE_CLIENT: postgres
      DATABASE_NAME: ${STRAPI_DB}
      DATABASE_HOST: postgresstrapi
      DATABASE_PORT: 5433
      DATABASE_USERNAME: ${STRAPI_USER}
      DATABASE_PASSWORD: ${STRAPI_PASSWORD}
    volumes:
      - ./aphroconfuso.mt-v1/strapi:/srv/app
    ports:
      - "1337:1337"
    depends_on:
      - postgresstrapi
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.cms.rule=Host(`cms.aphroconfuso.mt`)"
      - "traefik.http.routers.cms.entrypoints=websecure"
      - "traefik.http.routers.cms.tls.certresolver=myresolver"
    networks:
      - strapi
      - frontend

  postgresstrapi:
    container_name: postgresstrapi
    image: postgres
    environment:
      POSTGRES_DB: ${STRAPI_DB}
      POSTGRES_USER: ${STRAPI_USER}
      POSTGRES_PASSWORD: ${STRAPI_PASSWORD}
    command: -p 5433
    volumes:
      - aphroconfuso.mt-v1-strapi-data:/var/lib/postgresql/data
    networks:
      - strapi

volumes:
  dbdata:
  aphroconfuso.mt-v1-listmonk-data:
  aphroconfuso.mt-v1-strapi-data:

networks:
  frontend:
    external: true
  backend:
    external: false
  listmonk:
    external: true
  strapi:
    external: true
