services:
  traefik:
    image: "traefik:v2.5"
    container_name: "traefik"
    command:
      - "--log.level=DEBUG"
      - "--api.dashboard=false"
      - "--api.insecure=false"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.dnschallenge=true"
      - "--certificatesresolvers.myresolver.acme.dnschallenge.provider=cloudflare"
      - "--certificatesresolvers.myresolver.acme.email=${ADMIN_EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--pilot.token=${TRAEFIK_PILOT_KEY}"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.joegatt.net`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=myresolver"
      - "traefik.http.routers.traefik.service=api@internal"
      # - "traefik.http.routers.traefik.middlewares=auth"
      # - "traefik.http.middlewares.auth.basicauth.users=${ADMINER_USER_PASSWORD}"
    environment:
      - CLOUDFLARE_EMAIL=${CLOUDFLARE_EMAIL}
      - CLOUDFLARE_DNS_API_TOKEN=${CLOUDFLARE_DNS_API_TOKEN}
      - CLOUDFLARE_API_KEY=${CLOUDFLARE_API_KEY}
    networks:
      - host
    ports:
      - "443:443"
      - "8080:8080"
    volumes:
      - "./letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  factory:
    container_name: factory.joegatt.net
    build:
      context: ./joegatt.net-factory
    volumes:
      - ./tmp/npm:/root/.npm:z
      - ./joegatt.net-factory/src:/usr/src/app/src:z
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.factory.rule=Host(`factory.joegatt.net`)"
      - "traefik.http.routers.factory.entrypoints=websecure"
      - "traefik.http.routers.factory.tls.certresolver=myresolver"
    networks:
      - backend
      - host
    command: node ./dist/index.js
    environment:
      - NODE_ENV=production
      - POSTGRES_DB=${JOEGATTNET_DB}
      - POSTGRES_PASSWORD=${JOEGATTNET_PASSWORD}
      - POSTGRES_USER=${JOEGATTNET_USER}
    restart: always

  graphql:
    container_name: graphql
    restart: always
    image: graphile/postgraphile
    environment:
      DATABASE_URL: postgres://${JOEGATTNET_USER}:${JOEGATTNET_PASSWORD}@postgres:5432/${JOEGATTNET_DB}
      PORT: 5432
    depends_on:
      - postgres
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.graphql.rule=Host(`graphql.joegatt.net`) || Host(`graphql.joegatt.net`) && Path(`/graphql`)"
      - "traefik.http.routers.graphql.entrypoints=websecure"
      - "traefik.http.routers.graphql.tls.certresolver=myresolver"
    networks:
      - backend
    command:
      [
        "-w",
        "--cors",
        "-c",
        "postgres://${JOEGATTNET_USER}:${JOEGATTNET_PASSWORD}@postgres:5432/${JOEGATTNET_DB}",
        "-s",
        "api",
        "--extended-errors",
        "hint,detail,errcode",
        "--jwt-secret",
        $JWT_SECRET,
        "--token",
        "api.jwt_token",
        "--default-role",
        "unregistered"
      ]
    ports:
      - 5433:5433

  postgres:
    container_name: postgres
    image: postgres:12
    volumes:
      - ./joegatt.net-db/init:/docker-entrypoint-initdb.d
      - dbdata:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${JOEGATTNET_DB}
      - POSTGRES_PASSWORD=${JOEGATTNET_PASSWORD}
      - POSTGRES_USER=${JOEGATTNET_USER}
    networks:
      - backend
    ports:
      - 5432:5432

  v3joegattnet:
    container_name: v3.joegatt.net
    build:
      context: ./joegatt.net-v3-html
    volumes:
      - ./joegatt.net-v3-html:/usr/share/nginx/html
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.v3joegattnet.rule=Host(`v3.joegatt.net`, `joegatt.net`, `www.joegatt.net`)"
      - "traefik.http.routers.v3joegattnet.entrypoints=websecure"
      - "traefik.http.routers.v3joegattnet.tls.certresolver=myresolver"
    networks:
      - host

  dbadmin:
    container_name: dbadmin
    image: adminer
    depends_on:
      - postgres
    networks:
      - host
      - backend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dbadmin.rule=Host(`adminer.joegatt.net`)" # domain to expose on
      - "traefik.http.routers.dbadmin.entrypoints=websecure" # if you named your 443 entrypoint differently than webscure, substitute it here!
      - "traefik.http.routers.dbadmin.tls.certresolver=myresolver" # if you named your cert resolver differently than letsencrypt, substitute it here!
      # - "traefik.http.routers.dbadmin.middlewares=dbauth"
      # - "traefik.http.middlewares.dbauth.basicauth.users=${ADMINER_USER_PASSWORD}" # uncomment if you will secure db admin with password # substitute with your htpasswd string and escape dollar signs!

volumes:
  dbdata:


networks:
  backend:
    driver: bridge
  host:
    driver: host
