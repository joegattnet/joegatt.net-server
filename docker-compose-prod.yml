version: "3.3"

services:
  # traefik:
  #   image: "traefik:v2.4.13"
  #   container_name: "traefik"
  #   command:
  #     - "--log.level=ERROR"
  #     - "--api.dashboard=true"
  #     - "--providers.docker=true"
  #     - "--providers.docker.exposedbydefault=false"
  #     - "--entrypoints.web.address=:80"
  #     - "--pilot.token=${TRAEFIK_PILOT_KEY}"
  #   labels:
  #     - "traefik.http.routers.factory.entrypoints=web"
  #     - "traefik.http.routers.api.rule=Host(`traefik.joegatt.net`)"
  #     - "traefik.http.routers.api.service=api@internal"
  #     - "traefik.http.routers.api.middlewares=auth"
  #     - "traefik.http.middlewares.auth.basicauth.users=admin:${TRAEFIK_PASSWORD}"
  #   ports:
  #     - "80:80"
  #     - "8080:8080"
  #   volumes:
  #     - "/var/run/docker.sock:/var/run/docker.sock:ro"

  traefik:
    image: "traefik:v2.5"
    container_name: "traefik"
    command:
      #- "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      #- "--certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.myresolver.acme.email=${ADMIN_EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--pilot.token=${TRAEFIK_PILOT_KEY}"
    ports:
      - "443:443"
      - "8080:8080"
    volumes:
      - "./letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  # whoami:
  #   image: "traefik/whoami"
  #   container_name: "simple-service"
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.whoami.rule=Host(`whoami.example.com`)"
  #     - "traefik.http.routers.whoami.entrypoints=websecure"
  #     - "traefik.http.routers.whoami.tls.certresolver=myresolver"

  factory:
    container_name: factory.joegatt.net
    build:
      context: ./joegatt.net-factory
    volumes:
      - ./tmp/npm:/root/.npm:z
      - ./joegatt.net-factory/src:/usr/src/app/src:z
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.factory.rule=Host(`factory.joegatt.net`, `joegatt.org`, `www.joegatt.org`)"
#      - "traefik.http.routers.factory.entrypoints=web"
      - "traefik.http.routers.factory.entrypoints=websecure"
      - "traefik.http.routers.factory.tls.certresolver=myresolver"
    networks:
      - backend
      - traefik-global-proxy
    command: node ./dist/index.js
    environment:
      - NODE_ENV=production
      - POSTGRES_DB=${JOEGATTNET_DB}
      - POSTGRES_PASSWORD=${JOEGATTNET_PASSWORD}
      - POSTGRES_USER=${JOEGATTNET_USER}
    restart: always

  graphql:
    container_name: graphql
    restart: always
    image: graphile/postgraphile
    environment:
      DATABASE_URL: postgres://${JOEGATTNET_USER}:${JOEGATTNET_PASSWORD}@postgres:5432/${JOEGATTNET_DB}
      PORT: 5432
    depends_on:
      - postgres
    labels:
      - "traefik.enable=true"
      # - "traefik.http.routers.graphql.rule=Host(`graphql.joegatt.net`) || Host(`graphql.joegatt.net`) && Path(`/graphql`)"
      - "traefik.http.routers.graphql.rule=Host(`graphql.joegatt.net`)"
      # - "traefik.port=5000"
      # - "traefik.http.routers.graphql.entrypoints=web"
      - "traefik.http.routers.graphql.entrypoints=websecure"
      - "traefik.http.routers.graphql.tls.certresolver=myresolver"
    networks:
      - backend
      - traefik-global-proxy
    # ports:
    #   - 5000:5000
    command:
      [
        "-w",
        "--cors",
        "-c",
        "postgres://${JOEGATTNET_USER}:${JOEGATTNET_PASSWORD}@postgres:5432/${JOEGATTNET_DB}",
        "-s",
        "api",
        "--extended-errors",
        "hint,detail,errcode",
        "--jwt-secret",
        $JWT_SECRET,
        "--token",
        "api.jwt_token",
        "--default-role",
        "unregistered"
      ]

  # pgadmin:
  #   container_name: pgadmin
  #   image: dpage/pgadmin4:latest
  #   depends_on:
  #     - postgres
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-pgadmin4@pgadmin.org}
  #     PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
  #   networks:
  #     - postgres
  #     - web
  #   # ports:
  #   #   - "${PGADMIN_PORT:-5050}:80"
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.pgadmin.rule=Host(`pgadmin.joegatt.net`)"
  #     - "traefik.http.routers.pgadmin.entrypoints=web"
  #     - "traefik.port=5050"
  #   restart: unless-stopped

  # postgres:
  #   container_name: postgres
  #   restart: always
  #   image: postgres:10.4-alpine
  #   build:
  #     context: ./joegatt.net-db
  #   volumes:
  #     - ./joegatt.net-db/init:/docker-entrypoint-initdb.d
  #   environment:
  #     POSTGRES_USER: ${JOEGATTNET_USER}
  #     POSTGRES_PASSWORD: ${JOEGATTNET_PASSWORD}
  #     POSTGRES_DB: ${JOEGATTNET_DB}
  #   expose:
  #     - 5432
  #   ports:
  #     - 5432
  #   networks:
  #     - psql-pgql
  #     - postgres

  postgres:
    container_name: postgres
    image: postgres:12
    volumes:
      - ./joegatt.net-db/init:/docker-entrypoint-initdb.d
      - dbdata:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${JOEGATTNET_DB}
      - POSTGRES_PASSWORD=${JOEGATTNET_PASSWORD}
      - POSTGRES_USER=${JOEGATTNET_USER}
    networks:
      # database does not need to be in the proxy network, as it won't be exposed.
      - backend

  v3joegattnet:
    container_name: v3.joegatt.net
    build:
      context: ./joegatt.net-v3-html
    volumes:
      - ./joegatt.net-v3-html:/usr/share/nginx/html
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.v3joegattnet.rule=Host(`v3.joegatt.net`, `joegatt.net`, `www.joegatt.net`)"
      # - "traefik.http.routers.v3joegattnet.entrypoints=web"
      - "traefik.http.routers.v3joegattnet.entrypoints=websecure"
      - "traefik.http.routers.v3joegattnet.tls.certresolver=myresolver"

# networks:
#   psql-pgql:
#   postgres:
#     driver: bridge
#   web:
#     driver: bridge

# volumes:
#   pgadmin:
#   postgres:

###############################################################################################

  # frontend:
  #   container_name: simple_prod_frontend
  #   image: leonpahole/simple-frontend-angular:latest # for demo purposes
  #   depends_on:
  #     - api
  #   networks:
  #     - traefik-global-proxy
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.simple-fe.rule=Host(`simple.mydomain.com`)" # domain to expose on
  #     - "traefik.http.routers.simple-fe.entrypoints=websecure" # if you named your 443 entrypoint differently than webscure, substitute it here!
  #     - "traefik.http.routers.simple-fe.tls.certresolver=letsencrypt" # if you named your cert resolver differently than letsencrypt, substitute it here!

  # api:
  #   container_name: simple_prod_api
  #   image: leonpahole/simple-backend-nodejs:latest # for demo purposes
  #   depends_on:
  #     - db
  #   environment:
  #     - NODE_ENV=production
  #     - DB_NAME=simple
  #     - DB_USERNAME=admin
  #     - DB_PASSWORD=admin
  #     - DB_HOST=db
  #   networks:
  #     - traefik-global-proxy
  #     - backend
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.simple-be.rule=Host(`api.simple.mydomain.com`)" # domain to expose on
  #     - "traefik.http.routers.simple-be.entrypoints=websecure" # if you named your 443 entrypoint differently than webscure, substitute it here!
  #     - "traefik.http.routers.simple-be.tls.certresolver=letsencrypt" # if you named your cert resolver differently than letsencrypt, substitute it here!

  # db:
  #   container_name: simple_prod_db
  #   image: postgres:12
  #   volumes:
  #     - dbdata:/var/lib/postgresql/data
  #   environment:
  #     - POSTGRES_DB=simple
  #     - POSTGRES_USER=admin
  #     - POSTGRES_PASSWORD=admin
  #   networks:
  #     # database does not need to be in the proxy network, as it won't be exposed.
  #     - backend

  dbadm:
    container_name: simple_prod_db_admin
    image: adminer
    depends_on:
      - postgres
    networks:
      - backend
      - traefik-global-proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.simple-dba.rule=Host(`pgadmin.joegatt.net`)" # domain to expose on
      - "traefik.http.routers.simple-dba.entrypoints=websecure" # if you named your 443 entrypoint differently than webscure, substitute it here!
      - "traefik.http.routers.simple-dba.tls.certresolver=letsencrypt" # if you named your cert resolver differently than letsencrypt, substitute it here!
      # - "traefik.http.middlewares.db-ipwhitelist.ipwhitelist.sourcerange=12.34.56.78" # uncomment if you will secure db admin with an IP whitelist and add your comma-separated IP addresses
      # - "traefik.http.routers.simple-dba.middlewares=dbauth,db-ipwhitelist" # uncomment if you will use both auth and ip whitelist and comment below line
      - "traefik.http.routers.simple-dba.middlewares=dbauth"
      - "traefik.http.middlewares.dbauth.basicauth.users=dbadmin:$$apr1$$kx5wMS4q$$TGmFmP9Io1Srr9FR9PQY7/" # uncomment if you will secure db admin with password # substitute with your htpasswd string and escape dollar signs!

volumes:
  dbdata:

networks:
  traefik-global-proxy:
    external: true
  backend:
